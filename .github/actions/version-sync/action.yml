name: Version Check and Update
description: Checks and updates semantic versions in JSON files
inputs:
  json-files:
    description: Space-delimited list of JSON files to check
    required: true
  release-type:
    description: The type of release to perform (patch, minor, major), if needed
    required: false
    default: patch
  force-release:
    description: The type of release to force (patch, minor, major, ''), always
    required: false
    default: ''
  commit-message:
    description: Custom message for the commit. Use {version} to include the new version dynamically. Leave empty for no message.
    required: false
    default: ''
  tag-message:
    description: Custom message for the tag. Use {tag} to include the new tag dynamically. Leave empty for no message.
    required: false
    default: ''
outputs:
  tag-name:
    description: the new tag name or the current tag name if the repo is already in sync
    value: ${{ steps.sync_versions.outputs.tag-name || '' }}
  new-tag-name:
    description: the new tag name or empty string if tag if the repo is already in sync
    value: ${{ steps.sync_versions.outputs.new-tag-name || '' }}
runs:
  using: composite
  steps:
    - name: Dump github context
      if: env.DEBUG_MODE == 1
      run: echo "$GITHUB_CONTEXT"
      shell: bash
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}

    - name: Node, npm versions, and install
      run: |
        node --version
        npm --version
        npm install
        rm package-lock.json
      shell: bash
      working-directory: ${{ github.action_path }}

    - name: Sync versions
      id: sync_versions
      run: node ${{ env.DEBUG_MODE == '1' && '--inspect-brk=9229' || '' }} ${{ github.action_path }}/index.js
      shell: bash
      env:
        RELEASE_TYPE: ${{ inputs.release-type }}
        FORCE_RELEASE: ${{ inputs.force-release }}
        JSON_FILES: ${{ inputs.json-files }}
        COMMIT_MESSAGE: ${{ inputs.commit-message }}
        TAG_MESSAGE: ${{ inputs.tag-message }}
